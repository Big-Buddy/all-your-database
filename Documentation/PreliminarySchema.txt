create table Users
(
  UserID varchar(63) not null,
  Password varchar(127) not null,
  UserType enum('Regular', 'StoreManager', 'Admin') not null,
  MembershipPlan enum('Normal', 'Silver', 'Premium') not null default 'Normal',
  Phone varchar(20),
  Email varchar(127),
  AddressStreet varchar(255) not null,
  AddressCity enum('Montreal', 'Quebec City', 'Toronto', 'Ottawa') not null,
  AddressProvince enum('Quebec', 'Ontario') not null,
  AddressCountry varchar(63) not null,
  AddressPostalCode varchar(63) not null,
  primary key (UserID)
);

create table Ads
(
  AdID int not null auto_increment,
  PostingUserID varchar(63) not null,
  PostingDate date not null,
  DaysToPromote int not null default 0,
  AdType enum('Buy', 'Sell') not null,
  Title varchar(255) not null,
  Description varchar(2047) not null,
  PriceInCADCents int,
  Category enum('Clothing', 'Books', 'BuySellElectronics', 'MusicalInstruments', /* Buy and Sell */
                'Tutors', 'EventPlanners', 'Photographers', 'PersonalTrainers', /* Services */
                'RentElectronics', 'Car', 'Apartment', 'WeddingDresses', /* Rent */
                'MenSeekingWomen', 'WomenSeekingMen', 'MenSeekingMen', 'WomenSeekingWomen') /* Personals */
                not null,
  primary key (AdID),
  foreign key (PostingUserID) references Users(UserID)
);

create table Images
(
  FilePath varchar(255) not null,
  AdID int not null,
  primary key (FilePath),
  foreign key (AdID) references Ads(AdID)
);

create table Stores
(
  StoreID int not null auto_increment,
  ManagerUserID varchar(63) not null,
  StoreName varchar(255) not null,
  StrategicLocation enum('SL1', 'SL2', 'SL3', 'SL4') not null,
  primary key (StoreID),
  foreign key (ManagerUserID) references Users(UserID)
);

create table RentedSpaces
(
  RentedSpaceID int not null auto_increment,
  AdID int not null,
  StoreID int not null,
  DateRented date not null,
  HoursRented tinyint not null,
  DeliveryServices bool not null,
  primary key (RentedSpaceID),
  foreign key (AdID) references Ads(AdID),
  foreign key (StoreID) references Stores(StoreID)
);

create table Payments
(
  PaymentID int not null auto_increment,
  PayingUserID varchar(63) not null,
  RentedSpaceID int, /* May be null in case of buying Promotion/Membership */
  AmountInCADCents int not null,
  CardNumber char(16) not null,
  CardExpiryDate date not null,
  CardSecurityCode char(3) not null,
  CardholderName varchar(127) not null,
  CardCompany enum('MasterCard', 'Visa', 'American Express', 'Discover') not null,
  CardType enum('Debit', 'Credit') not null,
  PaymentDate datetime,
  primary key (PaymentID),
  foreign key (PayingUserID) references Users(UserID),
  foreign key (RentedSpaceID) references RentedSpaces(RentedSpaceID)
);


create table ExternalBackupPayments
(
  PaymentID int not null,
  PayingUserID varchar(63) not null,
  RentedSpaceID int, /* May be null in case of buying Promotion/Membership */
  AmountInCADCents int not null,
  CardNumber char(16) not null,
  CardExpiryDate date not null,
  CardSecurityCode char(3) not null,
  CardholderName varchar(127) not null,
  CardCompany enum('MasterCard', 'Visa', 'American Express', 'Discover') not null,
  CardType enum('Debit', 'Credit') not null,
  PaymentDate datetime,
  primary key (PaymentID),
  foreign key (PayingUserID) references Users(UserID),
  foreign key (RentedSpaceID) references RentedSpaces(RentedSpaceID)
);

create table Ratings
(
  RatingID int not null auto_increment,
  AdIDBeingRated int not null,
  UserIDRatingAd varchar(63) not null,
  Rating tinyint not null,
  primary key (RatingID),
  foreign key (AdIDBeingRated) references Ads(AdID),
  foreign key (UserIdRatingAd) references Users(UserID)
);

delimiter //

create trigger RejectPersonalSelling before insert on Ads
for each row
begin
  if new.AdType = 'Sell' and (new.Category = 'MenSeekingWomen' or new.Category = 'WomenSeekingMen'
      or new.Category = 'MenSeekingMen' or new.Category = 'WomenSeekingWomen') then
    signal sqlstate '45000' set message_text = "Can't sell personals";
    end if;
end;//

create trigger RejectRating before insert on Ratings
for each row
begin
  if new.Rating < 1  or new.Rating > 5 then
    signal sqlstate '45000' set message_text = "Rating out of range.";
    end if;
end;//

create event BackupPayments
on schedule at '2017-11-30 11:00:00' + interval 1 day
do begin
  delete from ExternalBackupPayments;
  insert into ExternalBackupPayments
    select * from Payments;
end;//

delimiter ;

create event DeleteOldAds
on schedule every 1 day
do delete from Ads
where AdID in (
select AdID
from (select * from Ads join Users on Ads.PostingUserID = Users.UserID) as AdsAndUsers
where DaysToPromote <= 0 and datediff(now(), adddate(PostingDate,
  if(MembershipPlan = 'Premuim', 30, if(MembershipPlan = 'Silver', 14, 7)))) >= 0);

create event PromotionDaysRemaining
on schedule every 1 day
do update Ads set DaysToPromote = DaysToPromote - 1 
where DaysToPromote > 0;